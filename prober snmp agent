#!/usr/bin/python3
import sys
import time
import easysnmp
from easysnmp import Session

# Extract command line arguments
agent_info = sys.argv[1]
host_ip, port_num, community_str = agent_info.split(":")
frequency = float(sys.argv[2])
sample_count = int(sys.argv[3])
interval_duration = 1 / frequency

object_ids = []
previous_ids = []
current_ids = []
prev_gauge_vals = []
snmp_responses = []
last_uptime = 0

for i in range(4, len(sys.argv)):
    object_ids.append(sys.argv[i])

# Include sysUpTime OID at the start
object_ids.insert(0, '1.3.6.1.2.1.1.3.0')

# Establish SNMP session
snmp_session = Session(hostname=host_ip, remote_port=port_num, community=community_str, version=2, timeout=1, retries=1)

def compute_oid_rates(iter_count, start_time):
    global previous_ids, last_uptime, prev_gauge_vals
    gauge_idx = 0
    counter_idx = 0
    current_ids = []
    gauge_vals = []

    if iter_count != 0:
        print(f"{int(start_time)}|", end='')

    for idx in range(1, len(snmp_responses)):
        if snmp_responses[idx].value not in ['NOSUCHOBJECT', 'NOSUCHINSTANCE']:
            if snmp_responses[idx].snmp_type == 'GAUGE':
                gauge_vals.append(int(snmp_responses[idx].value))
                if iter_count != 0 and len(prev_gauge_vals) > 0:
                    gauge_diff = gauge_vals[gauge_idx] - prev_gauge_vals[gauge_idx]
                    print(f"{gauge_vals[gauge_idx]}({gauge_diff:+})|", end='')
                gauge_idx += 1
            elif snmp_responses[idx].snmp_type in ['COUNTER', 'COUNTER64']:
                current_ids.append(int(snmp_responses[idx].value))
                if iter_count != 0 and len(previous_ids) > 0:
                    oid_diff = current_ids[counter_idx] - previous_ids[counter_idx]
                    time_diff = sys_uptime - last_uptime
                    if oid_diff < 0:
                        # Handle counter rollover
                        if snmp_responses[idx].snmp_type == 'COUNTER':
                            oid_diff += 2 ** 32
                        elif snmp_responses[idx].snmp_type == 'COUNTER64':
                            oid_diff += 2 ** 64
                    rate = round(oid_diff / time_diff) if time_diff > 0 else 0
                    print(f"{rate}|", end='')
                counter_idx += 1
            elif snmp_responses[idx].snmp_type == 'OCTETSTR':
                if iter_count != 0:
                    print(f"{snmp_responses[idx].value}|", end='')

    previous_ids = current_ids
    prev_gauge_vals = gauge_vals
    last_uptime = sys_uptime
    if iter_count != 0:
        print()

if sample_count == -1:
    iter_count = 0
    while True:
        start_time = time.time()
        snmp_responses = snmp_session.get(object_ids)
        sys_uptime = int(snmp_responses[0].value) / 100
        if sys_uptime < last_uptime and iter_count != 0:
            print("Agent has RESET")
            last_uptime = sys_uptime  # Reset last_uptime
            previous_ids = []
            prev_gauge_vals = []
            continue
        compute_oid_rates(iter_count, start_time)
        end_time = time.time()
        iter_count += 1
        while time.time() < start_time + interval_duration:
            pass
        if end_time - start_time > interval_duration:
            factor = 1
            adjusted_duration = factor * interval_duration
            while end_time - start_time > adjusted_duration:
                factor += 1
                adjusted_duration = factor * interval_duration
            while time.time() < start_time + adjusted_duration:
                pass
else:
    for iter_count in range(sample_count + 1):
        start_time = time.time()
        snmp_responses = snmp_session.get(object_ids)
        sys_uptime = int(snmp_responses[0].value) / 100
        if sys_uptime < last_uptime and iter_count != 0:
            print("Agent has RESET")
            last_uptime = sys_uptime  # Reset last_uptime
            previous_ids = []
            prev_gauge_vals = []
            continue
        compute_oid_rates(iter_count, start_time)
        end_time = time.time()
        while time.time() < start_time + interval_duration:
            pass
        if end_time - start_time > interval_duration:
            factor = 1
            adjusted_duration = factor * interval_duration
            while end_time - start_time > adjusted_duration:
                factor += 1
                adjusted_duration = factor * interval_duration
            while time.time() < start_time + adjusted_duration:
                pass
